How to untie a program from the global filesystem:
* No CWD
* No `..`
* No root
* All paths only from env vars or command arguments (preferably the former, it's just a little more convenient for reuse and already has names), only appending to paths gotten that way (like "${CONFIG_PATH}/env_vars.env" or just "${CONFIG_PATH}", NEVER "/somepath/${VARPATH}" - breaks incapsulation)

* All binaries are functions (like plain C functions, i.e. with no context attached, no globals as well)
* All files are arguments (directories included, that is, every file, really)
* All paths are refences

Even better incapsulation: no directories at all, instead just files with loadable env vars with paths
* This makes a new rule: no path concatenation with a literal, e.g. "$USERFILES/$USERFILE" is allowed, but "$CONFIGDIR/config.cfg" is not

The simplest way would be to either use chroot when running programs (that's what containers do) or just having prefixes for everything (basically the same as chroot, actually). But the referency approach seems kinda nice
